// 스코프 
// 전역 스코프를 갖는 전역 변수는 코드 어디에서든 참조 가능
// 함수 내부에서 선언된 지역 변수는 함수 내부에서나 그 지역의 하부에서만 참조 가능

// 자바스크립트는 함수 레벨 스코프를 따른다. 함수 레벨 스코프란 함수 내에서 선언된 변수는 함수 내에서만 유효하다는 뜻이다. 다른 c-family 언어들은 블록 레벨 스코프를 따른다.
// 하지만 ECMAScript 16에서 let 을 사용하면 블록 레벨 스코프를 사용할 수 있게 되었다.

var a = 3;

{
    var a = 6;
    
    console.log("블록 내의 a의 값 : "+a);
}

console.log("블록 밖의 a의 값 : "+a);

let b = 3;
{
    let b = 6;
    console.log("블록 내의 b의 값 : "+b);
}

console.log("블록 밖의 b의 값 : "+b);

// let을 사용하면 블록 안에서만 변수 할당 값이 유효한 것을 확인할 수 있다.


let x = 10;

function hello(){
    // let x = 10;
    console.log(x);
}

hello(); // 함수 내에 지역 변수 x가 없으니 전역 변수 x를 참조, 만약 중복되는 변수가 전역과 지역에 모두 있다면 함수 내부에서는 전역,지역 변수를 모두 참조 가능하나 지역 변수를 우선적으로 참조한다.

console.log(x); // 전역 변수 x를 참조

/////////// 함수 안에서 지역 변수의 값을 변경 가능하다. 또한 내부함수 에서는 본인이 포함되어 있는 함수의 변수와 전역 변수 모두 참조와 변경이 가능하다.

let c = 3;

function bye(){
    c = 9; // 전역 변수 c 값 변경
    let d = 10;
    console.log("함수 내부에서의 c 값 : "+c);
    let hello2 = function (){
        d = 3; // 함수 내 지역 변수 d 값 변경
        c = 1; // 전역 변수 c 값 변경 
        console.log("내부함수 내부에서의 d 값 : "+d);
    }
    hello2();
}
bye();
console.log("함수 밖에서의 c 값 : "+c);

